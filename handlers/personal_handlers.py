from aiogram import types
from dp import dp, bot
from key import add_buttons, add_inline_url
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils import *
from config import *
import os

db = DB()


class dialog(StatesGroup):
    question_text = State()
    answer_text = State()
    posting = State()
    feedback_mes_id = None


@dp.message_handler(commands=['start'])
async def start_command(msg: types.Message):
    if msg.chat.type == 'private':
        db.insert("private", ["user_id"], [msg.from_user.id])
        await msg.reply("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Squad Booster!
–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.""", reply_markup=add_buttons(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "‚Ñπ –û –±–æ—Ç–µ", "üìù –ö–æ–º–∞–Ω–¥—ã"]))
    else:
        await msg.reply("""–ü—Ä–∏–≤–µ—Ç!
–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.""")


@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(msg: types.Message):
    if not msg.chat.type == 'private':
        return
    me = await bot.get_me()
    await msg.reply(f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å\n
‚ù§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.full_name}
üîë –í–∞—à ID: {msg.from_user.id}
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø: [—Å–∫–æ—Ä–æ]\n
üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: [—Å–∫–æ—Ä–æ]""", reply_markup=add_inline_url("–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", f"http://t.me/{me.username}?startgroup=hbase"))


@dp.message_handler(text="‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback(message: types.Message):
    if not message.chat.type == 'private':
        return
    await message.reply(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=add_buttons(["‚óÄÔ∏è –ù–∞–∑–∞–¥"]))
    await dialog.question_text.set()


@dp.message_handler(state=dialog.question_text, content_types="any")
async def state_feedback_question(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.reply("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∏–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=add_buttons(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "‚Ñπ –û –±–æ—Ç–µ", "üìù –ö–æ–º–∞–Ω–¥—ã"]))
        await state.finish()
        return
    db.insert("feedback", ["user_id"], [message.from_user.id])
    quest = db.select("feedback", "quest", "user_id", message.from_user.id)
    await bot.send_message(admin_id, f"[{message.from_user.first_name}](tg://user?id={message.from_user.id}), –≥–æ–≤–æ—Ä–∏—Ç: (Message ID: {quest})", parse_mode="Markdown")
    await bot.forward_message(admin_id, message.chat.id, message.message_id)
    await state.finish()


@dp.message_handler(commands="answ")
async def answ(message: types.Message):
    if not message.from_user.id == admin_id:
        return
    msg = message.text.split()
    msg.remove("/answ")
    msg = " ".join(msg)
    user_id = db.select("feedback", "user_id", "quest", msg)
    if user_id is None:
        await message.reply("–û—à–∏–±–∫–∞!")
        return
    dialog.feedback_mes_id = user_id
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
    await dialog.answer_text.set()
    db.delete("feedback", "quest", msg)


@dp.message_handler(state=dialog.answer_text, content_types="any")
async def state_feedback_answer(message: types.Message, state: FSMContext):
    await bot.send_message(dialog.feedback_mes_id, f'–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:')
    await bot.copy_message(dialog.feedback_mes_id, message.chat.id, message.message_id)
    await state.finish()


@dp.message_handler(text="‚Ñπ –û –±–æ—Ç–µ")
@dp.message_handler(commands=['help'])
async def about_command(msg: types.Message):
    if not msg.chat.type == 'private':
        return
    await msg.reply("Squad Booster Bot - —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø. –ó–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ –±–æ—Ç–µ –º–æ–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @SquadBooster. –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è, —Ç–æ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å—é–¥–∞ - @iv4bn.")


@dp.message_handler(text="üìù –ö–æ–º–∞–Ω–¥—ã")
@dp.message_handler(commands=['help'])
async def help_command(msg: types.Message):
    if not msg.chat.type == 'private':
        return
    await msg.reply("""–ö–æ–º–∞–Ω–¥—ã:
/warn - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ;
/unwarn - —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ;
/ban - –≤—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã;
/unban - —Å–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑–≥–Ω–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:
/mute - –∑–∞–ø—Ä–µ—Ç –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ;
/umute - —Å–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π;
/all - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –≤ —á–∞—Ç–µ;
/online - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –≤ —á–∞—Ç–µ –∫—Ç–æ –æ–Ω–ª–∞–π–Ω.""")


@dp.message_handler(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_command(msg: types.Message):
    await msg.reply("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∏–≤–∏–∞—Ç—É—Ä–µ.",
                        reply_markup=add_buttons(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "‚Ñπ –û –±–æ—Ç–µ", "üìù –ö–æ–º–∞–Ω–¥—ã"]))


@dp.message_handler(commands="post")
async def post(message: types.Message):
    if not message.chat.type == 'private':
        return
    if not message.from_user.id == admin_id:
        return
    await message.reply("–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await dialog.posting.set()


@dp.message_handler(state=dialog.posting)
async def posting(message: types.Message, state: FSMContext):
    ids = db.select("private", "user_id")
    for usid in ids:
        try: await bot.copy_message(usid[0], message.chat.id, message.message_id)
        except: pass
    await state.finish()


@dp.message_handler(commands="info")
async def settings(message: types.Message):
    conn = sqlite3.connect('db.db')
    cur = conn.cursor()
    if not message.from_user.id == admin_id:
        return
    cur.execute("SELECT name FROM sqlite_master WHERE type = 'table'")
    tables = cur.fetchall()
    tables.remove(('private',))
    tables.remove(('sett',))
    tables.remove(('feedback',))
    cur.execute("SELECT user_id FROM private ")
    users = cur.fetchall()
    with open('newfile.txt', 'w+', encoding="utf-8") as file:
        file.write(f"–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç({len(tables)}): {tables}\n")
        file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç({len(users)}): {users}\n")
        file.close()
    doc = open("newfile.txt", "rb")
    await bot.send_document(message.chat.id, doc)
    os.remove("newfile.txt")
